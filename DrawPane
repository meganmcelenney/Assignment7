// Assignment #: Arizona State University CSE205 #7
//         Name: Megan McElenney
//    StudentID: 1214828277
//      Lecture: TTh 4:30
//  Description: The DrawPane class creates a canvas where we can use
//               mouse key to draw either a Rectangle or a Circle with different
//               colors. We can also use the the two buttons to erase the last
//				 drawn shape or clear them all.

//all javafx imports
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.shape.Shape;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Circle;
import javafx.scene.paint.Color;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Orientation;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.input.MouseEvent;

import java.util.ArrayList;

public class DrawPane extends BorderPane
{
   //declaration of necessary variables
   private Button undoBtn, eraseBtn;
   private ComboBox<String> colorCombo;
   private RadioButton rbRect, rbCircle;
   private ArrayList<Shape> shapeList;
   private Pane canvas;
   boolean rect = true;
   private Color col;
   
   //Constructor of DrawPane
   public DrawPane()
   {
      //initializes bottom pane buttons
      undoBtn = new Button("Undo");
      eraseBtn = new Button("Erase");
      undoBtn.setMinWidth(80.0);
      eraseBtn.setMinWidth(80.0);
      
      //Create the color comboBox and initial its default color
      colorCombo = new ComboBox<>();
      colorCombo.getItems().addAll("Black","Blue", "Green", "Red", "Yellow", "Orange", "Pink");
      colorCombo.getSelectionModel().selectFirst();
      col = Color.BLACK;


      //Create the two radio buttons and also a ToggleGroup
      //so that the two radio buttons can be selected
      //mutually exclusively. Otherwise they are independent of each other
      rbRect = new RadioButton("Rectangle");
      rbCircle = new RadioButton("Circle");
      final ToggleGroup tGroup= new ToggleGroup();
      rbRect.setToggleGroup(tGroup);
      rbCircle.setToggleGroup(tGroup);
      rbRect.setSelected(true);


      //initialize shapeList, it is a data structure we used
      //to track the shape we created
      shapeList = new ArrayList<Shape>();

      //canvas is a Pane where we will draw rectangles and circles on it
      canvas = new Pane();
      canvas.setStyle("-fx-background-color: beige;");

      //initialize the remaining instance variables and set up
      //the layout
      //the left side of the window
      VBox left = new VBox();
      left.getChildren().addAll(colorCombo, rbRect, rbCircle);
      left.setSpacing(30.0);
      left.setPadding(new Insets(20, 20, 20, 20));
      left.setBorder(new Border(new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
      
      //the bottom of the window
      HBox bot = new HBox();
      bot.getChildren().addAll(undoBtn, eraseBtn);
      bot.setAlignment(Pos.CENTER);
      bot.setSpacing(10.0);
      bot.setPadding(new Insets(20, 20, 20, 20));
      bot.setBorder(new Border(new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
      
      //the right pane we draw on
      this.setCenter(canvas);
      this.setLeft(left);
      this.setBottom(bot);

      //Step #3: Register the source nodes with its handler objects
      canvas.setOnMousePressed(new MouseHandler());
      canvas.setOnMouseDragged(new MouseHandler());
      canvas.setOnMouseReleased(new MouseHandler());
      undoBtn.setOnAction(new ButtonHandler());
      eraseBtn.setOnAction(new ButtonHandler());
      rbRect.setOnAction(new ShapeHandler());
      rbCircle.setOnAction(new ShapeHandler());
      colorCombo.setOnAction(new ColorHandler());
      
    }

   //this class deals with input from the mouse, whether it is pressed, dragged, or released
   private class MouseHandler implements EventHandler<MouseEvent>
   {
	   Rectangle rectan;
	   Circle circ;

      public void handle(MouseEvent event)
      {
    	  //gets points of initial click
    	  double startX = 0;
    	  double startY = 0;
    	  
		 //handle MouseEvent here
    	  if(event.getEventType()== MouseEvent.MOUSE_PRESSED)
    	  {
    		  startX = event.getX();
    		  startY = event.getY();
    		  if(rect)//checks which shape it is
    		  {
    			  //creates rectangle, sets it's start point and temporary color, and adds it to the shapeList
    			  rectan = new Rectangle();
	    		  rectan.setX(startX);
				  rectan.setY(startY);
	    		  rectan.setFill(Color.WHITE ); 
	              rectan.setStroke(Color.BLACK );
	              shapeList.add(rectan);
        		  
    		  }
    		  else
    		  {  
    			  //creates circle, sets it's center point and temporary color, and adds it to the shapeList
    			  circ = new Circle();
    			  circ.setCenterX(startX); 
    			  circ.setCenterY(startY);
    			  circ.setFill(Color.WHITE);
    			  circ.setStroke(Color.BLACK ) ;
    			  shapeList.add(circ);
    		  }
    	  }
    	  else if(event.getEventType()== MouseEvent.MOUSE_DRAGGED)
    	  {
    		  if(rect)
    		  {
    			  //sets rectangle size (width and length)
				  rectan = (Rectangle)(shapeList.get(shapeList.size()-1));
    			  rectan.setWidth(Math.abs(startX - event.getX()));
        		  rectan.setHeight(Math.abs(startY - event.getY()));
        		  //adds new, growing rectangle to the canvas
        		  canvas.getChildren().clear();
        		  canvas.getChildren().addAll(shapeList);
    		  }
    		  else
    		  {
    			  //sets circle size (radius)
    			  circ = (Circle)(shapeList.get(shapeList.size()-1));
    			  circ.setRadius(Math.abs(startX - event.getX()));
    			  //adds new, growing circle to the canvas
    			  canvas.getChildren().clear();
    			  canvas.getChildren().addAll(shapeList);
    		  }
    	  }
    	  else if(event.getEventType()== MouseEvent.MOUSE_RELEASED)
    	  {
    		  if(rect)
    		  {
    			  //sets rectangle color and adds it to the canvas
    			  rectan = (Rectangle)(shapeList.get(shapeList.size()-1));
        		  rectan.setFill(col);
	              rectan.setStroke(Color.BLACK );
        		  canvas.getChildren().clear();
        		  canvas.getChildren().addAll(shapeList);
    		  }
    		  else
    		  {
    			  //sets circle color and adds it to the canvas
    			  circ = (Circle)(shapeList.get(shapeList.size()-1));
    			  circ.setFill(col);
	              rectan.setStroke(Color.BLACK );
    			  canvas.getChildren().clear();
    			  canvas.getChildren().addAll(shapeList);
    		  }
    	  }
      }//end handle()
   }//end MouseHandler

   //Step #2(B)- A handler class used to handle events from Undo & Erase buttons
   private class ButtonHandler implements EventHandler<ActionEvent>
   {
      public void handle(ActionEvent event)
      {
    	  if(event.getSource() == undoBtn)
    	  {
    		 //checks to make sure the array isn't empty then removes the most recent addition
    		 if(shapeList.size() > 0)
    			  shapeList.remove(shapeList.get(shapeList.size()-1));
    		 //updates canvas
    		 canvas.getChildren().clear();
    		 canvas.getChildren().addAll(shapeList);
    	  }
    	  if(event.getSource() == eraseBtn)
    	  {
    		 //clears the shapeList and the canvas
    		 shapeList.clear();
    		 canvas.getChildren().clear();
    		 canvas.getChildren().addAll(shapeList);
    	  }
      }
   }//end ButtonHandler

   //Step #2(C)- A handler class used to handle events from the two radio buttons
   private class ShapeHandler implements EventHandler<ActionEvent>
   {
      public void handle(ActionEvent event)
      {
    	  //checks which radio button is selected then states whether it is or is not a rectangle
    	  if(rbRect.isSelected())
		  {
			  rect = true;
		  }
		  else
			  rect = false;
      }
   }//end ShapeHandler

   //Step #2(D)- A handler class used to handle colors from the combo box
   private class ColorHandler implements EventHandler<ActionEvent>
   {
      public void handle(ActionEvent event)
      {
    	  //checks which item is selected in the combo box and then sets the col variable used in the
    	  //MOUSE_RELEASED event handler to the correct color
    	  String select = colorCombo.getSelectionModel().getSelectedItem();
    	  if(select.equals("Black"))
    		col = (Color.BLACK);
    	  if(select.equals("Blue"))
    		col = (Color.BLUE);
		  if(select.equals("Green"))
		    col = (Color.GREEN);
		  if(select.equals("Red"))
			col = (Color.RED);
		  if(select.equals("Yellow"))
			col = (Color.YELLOW);
		  if(select.equals("Orange"))
			col = (Color.ORANGE);
		  if(select.equals("Pink"))
			col = (Color.PINK);
	  }
   }//end ColorHandler
}//end class DrawPane
